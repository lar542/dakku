<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.popol.dakku.modules.web.post.PostMapper">
	
	<select id="getPageNm" parameterType="String" resultType="HashMap">
		select menu_code, menu_nm from menu where menu_code = #{menu_code}	
	</select>
	
	<sql id="searchFrag">
		where p.deleted_yn = 'N'
		and p.menu_code = #{menuCode}
		<if test="msCode != null">
		and p.ms_code = #{msCode}
		</if>
		<if test="searchWord != null">
			<choose>
				<when test="searchType == 'title'">
				and p.p_title like concat('%', #{searchWord}, '%')
				</when>
				<when test="searchType == 'content'">
				and p.p_content like concat('%', #{searchWord}, '%')
				</when>
				<otherwise>
				and (p.p_title like concat('%', #{searchWord}, '%') or p.p_content like concat('%', #{searchWord}, '%'))
				</otherwise>
			</choose>
		</if>
	</sql>
	
	<select id="getTotalRecord" parameterType="PagingVO" resultType="int">
		select 
			count(p.p_id)
		from post p
		<include refid="searchFrag" />
	</select>
	
	<select id="getPostList" parameterType="PagingVO" resultType="HashMap">
		select 
			A.p_id,
			ifnull(A.ms_nm, 'null') as ms_nm,
			A.p_title,
			A.p_good,
			A.p_cnt,
			A.hot_yn,
			date_format(A.created_at, '%y/%m/%d %H:%i') as created_at,
			A.nick,
			cmt_cnt
		from
		(	
			select 
				p.p_id,
				ms.ms_nm,
				p.p_title,
				p.p_good,
				p.p_cnt,
				p.hot_yn,
		        p.created_at,
		        nick,
		        count(cm_id) as cmt_cnt
			from post p
			inner join user u on (u.u_id = p.u_id)
			left join menu_state ms on (p.ms_code = ms.ms_code)
			left join comment c on (c.p_id = p.p_id)
			<include refid="searchFrag" />
			group by p.p_id
			order by p.p_id desc
		) A
		limit #{screenSize} offset #{offset}
	</select>
	
	<select id="getPost" parameterType="Long" resultType="HashMap">
		select
			p.p_id,
			p.p_title,
			p.p_content,
			p.p_good,
			p.p_bad,
			p.p_cnt,
			p.hot_yn,
			date_format(p.created_at, '%y/%m/%d %H:%i') as created_at,
            ifnull(date_format(p.updated_at, '%y/%m/%d %H:%i'), 'null') as updated_at,
            menu_code,
    		ifnull(ms_code, 'null') as ms_code,
			ifnull((select ms_nm from menu_state ms where ms.ms_code = p.ms_code), 'null') as ms_nm,
		    p.u_id,
		    nick,
		    c_parent_code as icon_class,
			c_content4 as icon_color,
		    exp,
		    cast(c_content1 as signed) + cast(c_content2 as signed) as next_required_exp
		from post p
		inner join user u on (u.u_id = p.u_id)
		inner join common_code c on (c.c_code = u.lv_code)
		where p.p_id = #{p_id}
		and p.deleted_yn = 'N'
	</select>
	
	<select id="getPostTitle" resultType="HashMap">
		select 
			menu_code,
		    menu_nm
		from menu
		where menu_parent in ('M01', 'M02')
		and read_only_yn = 'N'
	</select>
	
	<select id="getPostState" parameterType="String" resultType="HashMap">
		select 
			ms_code,
		    ms_nm
		from menu_state
		where menu_code = #{menu_code}
	</select>
	
	<insert id="saveFile" parameterType="HashMap" useGeneratedKeys="true" keyProperty="f_id">
		insert into file (origin_file_nm, stored_file_nm, extension, file_size) 
		values (#{origin_file_nm}, #{stored_file_nm}, #{extension}, #{file_size})
	</insert>
	
	<update id="modifyFile" parameterType="HashMap">
		update file
		set 
			<if test="type_id != null">
			type_id = #{type_id},
			</if>
			submit_yn = #{submit_yn},
			updated_at = NOW()
		where f_id = #{f_id}
	</update>
	
	<update id="removeFile" parameterType="String">
		update file
		set
			submit_yn = 'X'
		where type_id = #{type_id}
	</update>
	
	<insert id="savePost" parameterType="HashMap" useGeneratedKeys="true" keyProperty="p_id">
		insert into post (p_title, p_content, u_id, menu_code, ms_code)
		values (#{title}, #{content}, #{u_id}, #{postType}, #{postState})
	</insert>
	
	<select id="getFiles" parameterType="String" resultType="HashMap">
		select 
			f_id,
		    stored_file_nm
		from file
		where type_id = #{type_id}
		and submit_yn = 'Y'
	</select>
	
	<update id="modifyPost" parameterType="HashMap">
		update post
		set
			p_title = #{title}, 
			p_content = #{content}, 
			menu_code = #{postType}, 
			ms_code = #{postState},
			updated_at = NOW()
		where p_id = #{pId}
		and u_id = #{u_id}
	</update>
	
	<update id="removePost" parameterType="HashMap">
		update post
		set
			deleted_yn = 'Y'
		where p_id = #{pId}
		and u_id = #{u_id}
	</update>
	
	<update id="plusViewCnt" parameterType="Long">
		update post
		set
			p_cnt = p_cnt + 1
		where p_id = #{p_id}
	</update>
	
	<select id="getPostEmotion" parameterType="HashMap" resultType="String">
		select 
			emotion
		from post_user_emotion
		where p_id = #{pId}
		and u_id = #{u_id}
	</select>
	
	<insert id="addPostEmotion" parameterType="HashMap">
		insert into post_user_emotion (p_id, u_id, emotion)
		values (#{pId}, #{u_id}, #{emotion})
	</insert>
	
	<update id="plusEmotion" parameterType="HashMap">
		update post
		set
			<if test='emotion.equals("G")'>
			p_good = p_good + 1
			</if>
			<if test='emotion.equals("B")'>
			p_bad = p_bad + 1
			</if>
		where p_id = #{pId}
	</update>
	
	<delete id="removeEmotion" parameterType="HashMap">
		delete
		from post_user_emotion
		where p_id = #{pId}
		and u_id = #{u_id}
	</delete>
	
	<update id="minusEmotion" parameterType="HashMap">
		update post
		set
			<if test='emotion.equals("G")'>
			p_good = p_good - 1
			</if>
			<if test='emotion.equals("B")'>
			p_bad = p_bad - 1
			</if>
		where p_id = #{pId}
	</update>
	
	<select id="getComments" parameterType="HashMap" resultType="HashMap">
		SELECT  
			dc.cm_id, 
		    cm_parent,
		    cm_content,
		    cm_good,
		    cm_bad,
		    date_format(dc.created_at, '%y/%m/%d %H:%i') as created_at,
		    ifnull(date_format(dc.updated_at, '%y/%m/%d %H:%i'), 'null') as updated_at,
		    dc.deleted_yn,
		    p_id,
		    dc.u_id,
		    nick,
			c_parent_code as icon_class,
			c_content4 as icon_color
			<if test="u_id != null">
			, ifnull(emotion, 'null') as emotion
			</if>
		FROM    (
		        SELECT  fnc_comment_hierarchi(cm_id) AS cm_id
		        FROM    (
		                SELECT  @start_with := '',
		                        @cm_id := @start_with
		                ) vars, comment
		        WHERE   @cm_id IS NOT NULL
		        ) dc2
		JOIN    comment dc ON dc.cm_id = dc2.cm_id
		inner	join user u on (u.u_id = dc.u_id)
		inner	join common_code cc on (cc.c_code = u.lv_code)
		<if test="u_id != null">
		left outer join comment_user_emotion cue on (cue.u_id = #{u_id} and cue.cm_id = dc.cm_id)
		</if>
		where	dc.p_id = #{pId}
	</select>
	
	<select id="getComment" parameterType="HashMap" resultType="HashMap">
		select 
			p_id,
			cm_id,
			cm_parent,
			cm_content,
			cm_good,
			cm_bad
		from comment
		where cm_id = ${cmId}
		and u_id = ${u_id}
	</select>
	
	<insert id="saveComment" parameterType="HashMap" useGeneratedKeys="true" keyProperty="cm_id">
		insert into comment (cm_parent, cm_content, p_id, u_id)
		values (#{cmParent}, #{cmContent}, #{pId}, #{u_id})
	</insert>
	
	<update id="modifyComment" parameterType="HashMap">
		update comment
		set
			cm_content = #{cmContent},
			updated_at = NOW()
		where cm_id = #{cmId}
		and u_id = #{u_id} 
	</update>
	
	<update id="removeComment" parameterType="HashMap">
		update comment
		set
			deleted_yn = 'Y'
		where cm_id = #{cmId}
		and u_id = #{u_id}
	</update>
	
	<select id="getCommentEmotion" parameterType="HashMap" resultType="String">
		select
			emotion
		from comment_user_emotion
		where cm_id = #{cmId}
		and u_id = #{u_id}
	</select>
	
	<update id="addCommentEmotion" parameterType="HashMap">
		insert into comment_user_emotion (cm_id, u_id, emotion)
		values (#{cmId}, #{u_id}, #{emotion})
	</update>
	
	<update id="plusCommentEmotion" parameterType="HashMap">
		update comment
		set
			<if test='emotion.equals("G")'>
			cm_good = cm_good + 1
			</if>
			<if test='emotion.equals("B")'>
			cm_bad = cm_bad + 1
			</if>
		where cm_id = #{cmId}
	</update>
	
	<delete id="removeCommentEmotion" parameterType="HashMap">
		delete
		from comment_user_emotion
		where cm_id = #{cmId}
		and u_id = #{u_id}
	</delete>
	
	<update id="minusCommentEmotion" parameterType="HashMap">
		update comment
		set
			<if test='emotion.equals("G")'>
			cm_good = cm_good - 1
			</if>
			<if test='emotion.equals("B")'>
			cm_bad = cm_bad - 1
			</if>
		where cm_id = #{cmId}
	</update>
</mapper>